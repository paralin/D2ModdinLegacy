// Generated by CoffeeScript 1.4.0
(function() {
  var direSlots, radiantSlots, targetFindTime, wasInLobby, wasLobbyID;

  radiantSlots = 5;

  direSlots = 5;

  wasInLobby = false;

  wasLobbyID = 0;

  targetFindTime = 30000;

  this.pushChatMessage = function(msg) {
    var box;
    box = $(".chatBox");
    if (box.length === 0) {
      return;
    }
    box.val(box.val() + "\n" + msg);
    return box.scrollTop(box[0].scrollHeight);
  };

  Meteor.startup(function() {
    Session.set("servProgress", 50);
    Deps.autorun(function() {
      var curr, currTime, lobby, prog, startTime;
      curr = Session.get("servProgress");
      lobby = lobbies.findOne();
      startTime = Session.get("findStartTime");
      currTime = Session.get("500mstick");
      Session.set("servTimeElapsed", Math.floor((currTime - startTime) / 1000));
      if (!(lobby != null) || lobby.status === 0) {
        Session.set("servProgress", 0);
        return Session.set("findStartTime", 0);
      } else if (lobby.status === 1) {
        if (Session.get("findStartTime") === 0) {
          Session.set("findStartTime", new Date().getTime());
        }
        prog = (currTime - startTime) / targetFindTime * 100;
        if (prog > 75) {
          targetFindTime += 30000;
        }
        Session.set("servProgress", prog);
        return Session.set("servProgColor", "info");
      } else if (lobby.status === 2) {
        Session.set("servProgress", 80);
        return Session.set("servProgColor", "warning");
      } else if (lobby.status === 3) {
        Session.set("servProgress", 100);
        return Session.set("servProgColor", "success");
      }
    });
    return Deps.autorun(function() {
      var lobby, route, user;
      route = Router.current();
      if (!(route != null)) {
        return;
      }
      user = Meteor.user();
      if (!(user != null)) {
        return;
      }
      lobby = lobbies.findOne();
      if (route.route.name === "lobby" && !(lobby != null)) {
        Router.go(Router.routes["lobbyList"].path());
      } else if (route.route.name !== "lobby") {
        if (lobby != null) {
          Router.go(Router.routes["lobby"].path({
            id: lobby._id
          }));
          wasInLobby = true;
          return wasLobbyID = lobby._id;
        }
      }
    });
  });

  Template.lobby.statusIs = function(st) {
    var lobby;
    lobby = lobbies.findOne();
    if (!(lobby != null)) {
      return false;
    }
    return lobby.status === st;
  };

  Template.lobby.showPlayerList = function() {
    var lobby;
    lobby = lobbies.findOne();
    if (!(lobby != null)) {
      return false;
    }
    return lobby.status === 0;
  };

  Template.lobby.areFinding = function() {
    var lobby;
    lobby = lobbies.findOne();
    if (!(lobby != null)) {
      return false;
    }
    return lobby.status === 1 || lobby.status === 2;
  };

  Template.findDialog.servProgColor = function() {
    return Session.get("servProgColor");
  };

  Template.findDialog.arePlaying = function() {
    var lobby;
    lobby = lobbies.findOne();
    if (!(lobby != null) || !(lobby.status != null)) {
      return false;
    }
    return lobby.status === 3;
  };

  Template.findDialog.events({
    'click .connectBtn': function() {
      $(".connectBtn").prop('disabled', true);
      callMethod("connectgame", {});
      return Meteor.setTimeout(function() {
        return $(".connectBtn").prop('disabled', false);
      }, 1500);
    },
    'click .stopFindingBtn': function() {
      return callMethod("stopqueue", {});
    }
  });

  Template.lobby.events({
    "click .leaveLobby": function() {
      return callMethod("leavelobby", {});
    },
    "change .regionInput": function(evt) {
      var newVal;
      newVal = parseInt($(evt.target).val());
      return callMethod("setregion", {
        region: newVal
      });
    },
    "click .kickBtn": function() {
      return callMethod("kickplayer", {
        steam: this.steam
      });
    },
    'click .startBtn': function() {
      return callMethod("startqueue", {});
    },
    'keypress .passwordInput': function(evt, template) {
      var field, text;
      if (evt.which === 13) {
        field = template.find('.passwordInput');
        text = field.value;
        Meteor.call("setLobbyPassword", text);
        return field.blur();
      }
    },
    'keypress .titleInput': function(evt, template) {
      var field, text;
      if (evt.which === 13) {
        field = template.find(".titleInput");
        text = field.value;
        callMethod("setname", {
          name: text
        });
        return field.blur();
      }
    },
    "click .joinBtn": function() {
      return callMethod("switchteam", {
        team: this.team
      });
    },
    'keypress #chatInput': function(evt, template) {
      var input, text;
      if (evt.which === 13) {
        input = $("#chatInput");
        text = input.val();
        input.val("");
        if (text === "") {
          return;
        }
        return callMethod("chatmsg", {
          message: text
        });
      }
    }
  });

  Template.lobby.isHost = function() {
    var lobby, user;
    user = Meteor.userId();
    if (!(user != null)) {
      return;
    }
    lobby = lobbies.findOne();
    if (!(lobby != null)) {
      return;
    }
    return user === lobby.creatorid;
  };

  Template.findDialog.isHost = Template.lobby.isHost;

  Template.lobby.lobby = function() {
    return lobbies.findOne();
  };

  Template.lobby.status = Template.findDialog.status = function() {
    var lobby;
    lobby = lobbies.findOne();
    if (!(lobby != null) || !(lobby.status != null)) {
      return;
    }
    if (lobby.status === 3 && lobby.state >= GAMESTATE.PostGame) {
      return "Waiting for game results...";
    }
    switch (lobby.status) {
      case 0:
        return "Waiting for players to be ready...";
      case 1:
        return "Searching for a server...";
      case 2:
        return "Server launching...";
      case 3:
        return "Game in progress!";
      case 4:
        return "Game has ended.";
    }
  };

  Template.lobby.mod = function() {
    var lobby;
    lobby = lobbies.findOne();
    if (!(lobby != null)) {
      return;
    }
    return mods.findOne({
      _id: lobby.mod
    });
  };

  Template.lobby.gameInProgress = function() {
    return false;
  };

  Template.lobby.spectatorSlots = function() {
    var idx, res, slot, slots, _i, _len;
    slots = this.spectator;
    res = [];
    idx = -1;
    for (_i = 0, _len = slots.length; _i < _len; _i++) {
      slot = slots[_i];
      idx++;
      res.push({
        index: idx,
        team: "spectator" + idx,
        slots: slot
      });
    }
    return res;
  };

  Template.lobby.emptySlotS = function() {
    var curr, i, slots;
    slots = [];
    i = 0;
    curr = _.without(this.slots, null);
    while (i < (4 - curr.length)) {
      slots.push({
        team: this.team
      });
      i++;
    }
    return slots;
  };

  Template.lobby.emptySlotR = function() {
    var curr, i, lobby, slots;
    lobby = lobbies.findOne();
    curr = _.without(lobby.radiant, null);
    slots = [];
    i = 0;
    while (i < (5 - curr.length)) {
      slots.push({
        team: "radiant"
      });
      i++;
    }
    return slots;
  };

  Template.lobby.emptySlotD = function() {
    var curr, i, lobby, slots;
    lobby = lobbies.findOne();
    curr = _.without(lobby.dire, null);
    slots = [];
    i = 0;
    while (i < (5 - curr.length)) {
      slots.push({
        team: "dire"
      });
      i++;
    }
    return slots;
  };

  Template.findDialog.connectURL = function() {
    var lobby;
    lobby = lobbies.findOne();
    if (!(lobby != null) || !(lobby.serverIP != null)) {
      return;
    }
    return "steam://connect/" + lobby.serverIP;
  };

  Template.findDialog.serverIP = function() {
    var lobby;
    lobby = lobbies.findOne();
    if (!(lobby != null) || !(lobby.serverIP != null)) {
      return;
    }
    return lobby.serverIP;
  };

  Template.findDialog.progress = function() {
    return Session.get("servProgress");
  };

  Template.findDialog.gameOver = function() {
    var lobby;
    lobby = lobbies.findOne();
    if (!(lobby != null)) {
      return;
    }
    return lobby.state >= GAMESTATE.PostGame;
  };

  Template.findDialog.timeElapsed = function() {
    return Session.get("servTimeElapsed");
  };

  Template.findDialog.progBarClass = function() {
    var lobby;
    lobby = lobbies.findOne();
    if (!(lobby != null)) {
      return;
    }
    if (Template.findDialog.arePlaying()) {
      return "pbSmall";
    } else {
      return "progress-striped active";
    }
  };

  Template.findDialog.isConfiguring = function() {
    var lobby;
    lobby = lobbies.findOne();
    return (lobby != null) && lobby.status === 2;
  };

  Template.lobby.playerClass = function() {
    var cl;
    cl = "";
    if ((this.connected != null) && !this.connected) {
      cl += "danger";
    }
    return cl;
  };

}).call(this);
